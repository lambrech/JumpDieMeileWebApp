@page "/"
@using System.Text
@using System.Threading
@inject HttpClient httpClient

<h1>Under Construction...</h1>

<button @onclick="this.Test">Test_Get</button>
<button @onclick="this.Test2">Test_Post</button>

<textarea @bind=this.InputText @bind:event="oninput"></textarea>
<p></p>
<p>Content of textarea:</p>
<p>@this.InputText</p>


<p>Last answer:</p>
<p>@this.LastResponse</p>

@code
{
    [Parameter]
    public string InputText { get; set; } = string.Empty;

    [Parameter]
    public string LastResponse { get; set; } = string.Empty;

    public async void Test()
    {
        Console.WriteLine("Starting test");
        try
        {
            using (var client = new HttpClient())
            {
                var request = new HttpRequestMessage() {
                    RequestUri = new Uri("https://impulse-online.de/jdm_wa_db_relay/test.php"),
                    Method = HttpMethod.Get,
                };
                request.SetBrowserRequestMode(BrowserRequestMode.Cors);
                var result = await client.SendAsync(request);
                var response = await result.Content.ReadAsStringAsync();
                Console.WriteLine($"length: {response.Length}");
                Console.WriteLine(response);
                this.LastResponse = response;
                this.StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public async void Test2()
    {
        Console.WriteLine("Starting test");
        try
        {
            using (var client = new HttpClient())
            {
                var request = new HttpRequestMessage() {
                    RequestUri = new Uri("https://impulse-online.de/jdm_wa_db_relay/handle_post.php"),
                    Method = HttpMethod.Post,
                };
                request.SetBrowserRequestMode(BrowserRequestMode.Cors);
                request.Content = new StringContent(this.InputText);

                var protocolVersionBytes = BitConverter.GetBytes((int)1);
                var payloadBytes = Encoding.UTF8.GetBytes(this.InputText);
                var payloadLength = BitConverter.GetBytes(payloadBytes.Length);

                var finalPayload = protocolVersionBytes.Concat(payloadLength).Concat(payloadBytes).ToArray();

                request.Content = new ByteArrayContent(finalPayload);
                var result = await client.SendAsync(request);
                var response = await result.Content.ReadAsStringAsync();
                Console.WriteLine($"length: {response.Length}");
                Console.WriteLine(response);
                this.LastResponse = response;
                this.StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
