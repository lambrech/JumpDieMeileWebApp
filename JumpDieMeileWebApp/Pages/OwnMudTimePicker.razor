@inherits MudPicker<TimeSpan?>
@namespace JumpDieMeileWebApp.Pages

@(this.Render)

@code{

    protected override RenderFragment PickerContent =>
        @<CascadingValue Value="@(this)" IsFixed="true">
            <MudPickerToolbar Class="@(this.ToolbarClass)" Style="@(this.Style)" DisableToolbar="@(this.DisableToolbar)" Orientation="@(this.Orientation)" Color="@(this.Color)">
                <div class="mud-timepicker-hourminute">
                    @if (this.TimeEditMode == TimeEditMode.Normal)
                    {
                        <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@(this.HoursButtonClass)" OnClick="this.OnHourClick">@this.GetHourString()</MudButton>
                        <MudText Typo="Typo.h2" Class="mud-timepicker-separator">:</MudText>
                        <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@(this.MinuteButtonClass)" OnClick="this.OnMinutesClick">@this.GetMinuteString()</MudButton>
                    }
                    else
                    {
                        <MudText Typo="Typo.h2" Class="mud-timepicker-separator">@this.GetHourString():@this.GetMinuteString()</MudText>
                    }
                </div>
                @if (this.AmPm)
                {
                    <div class="mud-timepicker-ampm">
                        <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@(this.AmButtonClass)" OnClick="this.OnAmClicked">AM</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@(this.PmButtonClass)" OnClick="this.OnPmClicked">PM</MudButton>
                    </div>
                }
            </MudPickerToolbar>
            <MudPickerContent>
                <div class="mud-picker-time-container">
                    <div class="mud-picker-time-clock">
                        <div role="menu" tabindex="-1" class="mud-picker-time-clock-mask"
                             @ontouchmove="args => { this.CallJsInterop(args); }"
                             @ontouchstart="this.OnTouchStart"
                             @ontouchend="this.OnTouchEnd"
                             @onmousedown="this.OnMouseDown" @onmouseup="this.OnMouseUp">
                            <div class="@this.GetClockPinColor()"></div>
                            <div class="@this.GetClockPointerColor()" style="height: @this.GetPointerHeight(); transform: @this.GetPointerRotation()">
                                <div class="@this.GetClockPointerThumbColor()"></div>
                            </div>
                            <div class="@this.HourDialClass">
                                @if (this.AmPm)
                                {
                                    @*Hours from 1 to 12*@
                                    for (var i = 1; i <= 12; ++i)
                                    {
                                        var _i = i;
                                        var angle = (6 - _i) * 30;
                                        <MudText Class="@(this.GetNumberColor(_i))" Style="@(this.GetTransform(angle, 109, 0, 5))">@_i</MudText>
                                    }
                                    for (var i = 1; i <= 12; ++i)
                                    {
                                        var _i = i;
                                        <div class="mud-picker-stick mud-hour" style="@($"transform: rotateZ({_i * 30}deg);")"
                                             id="@($"hour_workarounds_are_kind_of_annoying_{_i}")"
                                             @onclick="() => this.OnMouseClickHour(_i)"
                                             @onmouseover="() => this.OnMouseOverHour(_i)" @onclick:stopPropagation="true">
                                        </div>
                                    }
                                }
                                else
                                {
                                    @*Hours from 13 to 24 (00)*@
                                    for (var i = 1; i <= 12; ++i)
                                    {
                                        var _i = i;
                                        var angle = (6 - _i) * 30;
                                        <MudText Class="@(this.GetNumberColor((_i + 12) % 24))" Style="@(this.GetTransform(angle, 109, 0, 5))">@(((_i + 12) % 24).ToString("D2"))</MudText>
                                    }
                                    @*Hours from 1 to 12*@
                                    for (var i = 1; i <= 12; ++i)
                                    {
                                        var _i = i;
                                        var angle = (6 - _i) * 30;
                                        <MudText Class="@(this.GetNumberColor(_i))" Typo="Typo.body2" Style="@(this.GetTransform(angle, 74, 0, 40))">@(_i.ToString("D2"))</MudText>
                                    }
                                    for (var i = 1; i <= 12; ++i)
                                    {
                                        var _i = i;
                                        <div class="mud-picker-stick" style="@($"transform: rotateZ({_i * 30}deg);")">
                                            <div class="mud-picker-stick-inner mud-hour" id="@($"hour_workarounds_are_kind_of_annoying_{_i}")"
                                                 @onclick="() => this.OnMouseClickHour(_i)"
                                                 @onmouseover="() => this.OnMouseOverHour(_i)" @onclick:stopPropagation="true">
                                            </div>
                                            <div class="mud-picker-stick-outer mud-hour" id="@($"hour_workarounds_are_kind_of_annoying_{_i + 12}")"
                                                 @onclick="() => this.OnMouseClickHour(_i + 12)"
                                                 @onmouseover="() => this.OnMouseOverHour(_i + 12)" @onclick:stopPropagation="true">
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="@this.MinuteDialClass">
                                @*Minutes from 05 to 60 (00) - step 5*@
                                @for (var i = 0; i < 12; ++i)
                                {
                                    var _i = i;
                                    var angle = (6 - _i) * 30;
                                    <MudText Class="@(this.GetNumberColor(_i * 5))" Style="@(this.GetTransform(angle, 109, 0, 5))">@((_i * 5).ToString("D2"))</MudText>
                                }
                                @for (var i = 0; i < 60; ++i)
                                {
                                    var _i = i;
                                    <div class="mud-picker-stick mud-minute" style="@($"transform: rotateZ({_i * 6}deg);")" id="@($"workarounds_are_kind_of_annoying_{_i}")"
                                         @onclick="() => this.OnMouseClickMinute(_i)"
                                         @onmouseover="() => { this.OnMouseOverMinute(_i); }" @onclick:stopPropagation="true">
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </MudPickerContent>
        </CascadingValue>;

}